package com.kh.chap01_abstraction.run;

import com.kh.chap01_abstraction.model.vo.Student;

public class AbstractionRun {
	
	/*
	 * 	1. 객체 지향 언어 : 객체 중심으로 돌아가는 언어
	 * 
	 * 	2. 객체? : 현실세계에 독립적으로 존재(목적, 가치 ,의미가 있는것) 하는 모든 것 (유형, 무형, 개념, ... )
	 * 			  현실세계는 객체들간의 상호작용으로 이루어져 있다. (내가 물을 먹는다)
	 * 
	 * 	3. 객체지향 프로그래밍 : 현실세계의 객체들간의 상호작용 
	 * 		
	 * 				프로그래밍을 통해 가상세계로 구현하는 과정 (내가 쇼핑몰에서 로그인을 한다)
	 * 	
	 * 	4. 구현하고자 하는 프로그램상의 필요한 객체들을 만들기 위해서 (즉, 생성하기 위해서)
	 * 	 	: 클래스라는 틀을 먼저 만들어야 한다! (클래스란? 각 객체들의 속성(정보)들을 담아낼 그릇 같은 존재) => 이름,나이,주소,휴대폰번호 ...를 담을수 있는 그릇
	 * 		>> 어떻게 만드는 걸까? => 추상화 + 캡슐화 접목해서 만들어야된다.
	 * 
	 *  5. 추상화 과정
	 *  	1) 내가 구현하고자 하는 프로그램에서 필요한 객체들을 생각해볼 것 
	 *  	2) 그 객체들이 가지는 공통적인 속성, 기능들을 모두 추출 => 이름,나이,주소,번호,mbti, 혈액형 ... 
	 *  	3) 추출한것들을 가지고 구현하고자 했던 프로그램의 "실질적 목적"에 맞춰 불필요한 속성, 기능 제거할 것 => mbti, 혈액형...
	 *  	4) 최종적으로 추려진 속성들을 어떤 자료형으로, 어떤 변수명으로 사용할건지 생각.
	 *  
	 *  	ex) 학생 관리 프로그램
	 *  	1) 학생관련 객체(차은우 학생, 주지훈 학생, 위하준 학생, ... )
	 *  	2) 공통적인 속성 및 기능(이름, 나이, 주소, 연락처, 키, 몸무게, 달리기속도, 학년, 반, 국어점수, 수학점수, 머리색, 발사이즈, 밥먹는다, 잠잔다 ... )
	 *  	3)  학생 "인적사항"을 관리하는 프로그램이라고 한다면 : 이름, 나이, 주소, 전화번호, 학년, 반
	 *  		학생 "성적"을 관리하는 프로그램이라고 한다면 : 이름, 학년 , 반, 국어점수, 수학점수, 영어점수
	 *  		학생 "건강"을 관리하는 프로그램이라고 한다면 : 이름, 학년 , 반, 키, 몸무게, 달리기 속도, 식사량, 수면패턴 
	 *  
	 *    		결국 추려진게 "이름, 나이, 키" 라는 가정하에 프로그래밍 진행
	 *    	4) 이름 : String name; 
	 *    	   나이 : int age;
	 *    		키 :  double height;
	 *    
	 *    
	 *    6. 위의 선정된 것들을 가지고 본격적으로 프로그래밍 진행..
	 *    
	 *    1) "변수" 만을 가지고 프로그래밍을 한다면? 
	 *    
	 *    * 변수 - 하나의 자료형의 하나의 값만을 보관할 수 있음
	 *    
	 *    차은우라는 학생 객체를 만들기 위해서 --> String name1 = "차은우"; int age1 = "20" double height1 =188.8;
	 *    주지훈라는 학생 객체를 만들기 위해서 --> String name2 = "주지훈"; int age2 = "30" double height2 =185.5;
	 *    위하준라는 학생 객체를 만들기 위해서 --> String name3 = "위하준"; int age3 = "25" double height3 =179.5;
	 *    
	 *    --> 수백 수천의 해당하는 변수를 만들어야하는 문제가 발생함!!
	 *    
	 *    2) "배열"로 프로그래밍을 한다면?
	 *    
	 *    *배열 - 하나의 자료형의 여러개의 값들을 보관할 수 있음
	 *    
	 *    학생들의 이름들을 보관하는 String[] name = {"차은우","주지훈","위하준" ... };
	 *    학생들의 나이를 보관하는 	  int[] age =  {20,		30,		25 	  ...};
	 *    학생들의 키를 보관하는    double[] height={188.8, 185.5,  179.5  ...};
	 *    
	 *    --> 기존의 학생 정보를 삭제할 때 뒤의 정보를 앞으로 떙기는 과정을 진행해야 하는데
	 *    	  잘못지우거나 잘못땡기는 경우 정보가 틀어지게 된다...
	 *    
	 *    --> 새로운 학생이 전학오면 ? 배열을 다시 만들어야함 + 복사해야하는 문제점...
	 *    
	 *    
	 *    3) 그래서 나온 개념이 구조체!!
	 *    
	 *    * 구조체 - 여러개의 자료형의 여러개의 값들을 보관할 수 있다!
	 *    
	 *    String값도 보관하고, int값도 보관하고, double값도 같이 보관할 수 있도록 나만의 배열같은 자료형을 만들자! 그게 바로 클래스(그릇)!!
	 *    Student 라는 클래스로 만들거임! => 객체의 정보를 보관할 그릇과도 같은 이런 클래스들은 => model.vo
	 *    
	 *    
	 *    
	 *    	
	 */

	public static void main(String[] args) {
		
		// 자바에서의 객체를 만들어보자(생성)
		// new 라는 키워드를 통해 Heap영역에 생성을 먼저 해야한다!
		// 클래스명 별칭 = new 클래스명();
		
		Student cha = new Student(); // 객체 생성 구문
		// 객체 판단 기준 주소값을 가지고 있는가?
		// 주소값을 담고 있다! 기본자료형이 아니기 때문에
		
		// 여기까지는 Heap영역에 할당된 공간에는 JVM의 초기값들이 셋팅되어있을 것
		
		// 각 영역에 "직접 접근"해서 내가 원하는 값 대입
		// arr[0] = 3;
		
		
		// 객체에 직접 접근 하는 방법은? =? 객체명.(점찍기)
		
		cha.name = "차은우";
		cha.age = 20;
		cha.height = 188.8;
		
		System.out.println(cha);
		System.out.println(cha.name + "님의 나이는 " + cha.age  + "살이고, 키는 " + cha.height + "cm 입니다.\n");
		
		
		// 주지훈 학생 객체 만들기 => 주지훈, 21 ,178.8
		
		Student ju = new Student();
		ju.name = "주지훈";
		ju.age = 20;
		ju.height = 178.8;
		
		System.out.println(ju);
		System.out.println(ju.name + "님의 나이는 " + ju.age  + "살이고, 키는 " + ju.height + "cm 입니다.");
		
		/*
		 * 필드를 public 접근제한자 작성
		 * => 필드에 직접적으로 접근해서 값 대입하거나 값을 가져올 수 있음..
		 * => 외부에서 함부로 값을 변질시키거나 조회권한이 없는 사람이 가져올 수 있는 문제 발생!!
		 * 		>> 캡슐화 작업을 할꺼임!
		 */
		
		

	}

}
